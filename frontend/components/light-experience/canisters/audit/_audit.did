type AuditCode = record {
  status : AuditCodeStatus;
  created : nat64;
  creator : principal;
  source : AuditCodeSource;
  owner : principal;
  code : text;
  index : nat32;
};
type AuditCodeSource = variant { Nft : nat32; Gift : principal; Paid : nat64 };
type AuditCodeStatus = variant {
  Movable : nat64;
  Used : record { nat64; text };
  Using : record { nat64; text };
  Owned : nat64;
};
type AuditPermission = variant {
  AuditReclaim;
  AuditGenerateCodeByPaid;
  AuditUsingCode;
  AuditLog;
  AuditConfig;
  AuditGenerateCodeByNft;
  AuditUsedCode;
  AuditPermission;
  AuditGenerateCode;
  AuditFind;
  AuditGive;
  AuditQuery;
};
type Balance = record { e8s : nat64 };
type CanisterStatus = variant { stopped; stopping; running };
type CanisterStatusResult = record {
  status : CanisterStatus;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCAnisterSettings;
  idle_cycles_burned_per_day : nat;
  module_hash : opt vec nat8;
};
type DefiniteCAnisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type Log = record { content : text; time : nat64; level : LogLevel };
type LogLevel = variant { Error; Info; Warn; Debug; Trace };
type MotokoResult = variant { ok; err : text };
type MotokoResult_1 = variant { ok : text; err : text };
type MotokoResult_2 = variant { ok : vec text; err : text };
type NftConfig = record { got : nat8; interval : nat64; initial : nat8 };
type Page = record { page : nat32; size : nat32 };
type PageData = record {
  all : nat32;
  data : vec AuditCode;
  page : nat32;
  size : nat32;
};
type PageData_1 = record {
  all : nat32;
  data : vec Log;
  page : nat32;
  size : nat32;
};
type PayConfig = record {
  transfer_fee : Price;
  next_subaccount : nat64;
  ledger : principal;
  price : Price;
  collect : principal;
};
type Price = record { e8s : nat64 };
type Result = variant { Ok : nat64; Err : TransferError };
type TransferError = variant {
  TxTooOld : record { allowed_window_nanos : nat64 };
  BadFee : record { expected_fee : Price };
  TxDuplicate : record { duplicate_of : nat64 };
  TxCreatedInFuture;
  InsufficientFunds : record { balance : Price };
};
type TransferUser = variant { "principal" : principal; address : text };
type TransformedAuditCodeWithStatus = record {
  status : AuditCodeStatus;
  code : text;
  time : nat64;
};
type UserDataResult = record {
  moved : vec TransformedAuditCodeWithStatus;
  owned : vec TransformedAuditCodeWithStatus;
  used : vec TransformedAuditCodeWithStatus;
  using : vec TransformedAuditCodeWithStatus;
};
type WalletReceiveResult = record { accepted : nat64 };
service : {
  canister_status : () -> (CanisterStatusResult);
  code_used : (principal, text, text) -> (MotokoResult);
  code_using : (principal, text, text) -> (MotokoResult_1);
  codes_find_by_page : (Page) -> (PageData) query;
  codes_generate_by_nft : (nat32, nat8, principal) -> (vec text);
  codes_generate_by_nft_max_size : (nat32) -> (nat8);
  codes_generate_by_pay : (principal) -> (vec text);
  codes_generate_by_pay_address : () -> (text);
  codes_generate_by_pay_balance : () -> (Balance);
  codes_generate_by_pay_price : () -> (Price) query;
  codes_generate_by_pay_retrieve : (Price, TransferUser) -> (Result);
  codes_generate_by_permission : (nat8, principal) -> (vec text);
  codes_give : (vec text) -> (MotokoResult);
  codes_query_by_user : () -> (UserDataResult) query;
  codes_reclaim : (vec text, principal) -> (MotokoResult_2);
  config_nft_find : () -> (NftConfig) query;
  config_nft_set : (NftConfig) -> (bool);
  config_pay_find : () -> (PayConfig) query;
  config_pay_set : (PayConfig) -> (bool);
  logs_delete : (nat32) -> (bool);
  logs_find_by_page : (Page) -> (PageData_1) query;
  permissions_find : () -> (vec record { text; vec AuditPermission }) query;
  permissions_grant_all_permissions : (principal) -> (bool);
  permissions_has_all_permissions : (principal) -> (bool) query;
  permissions_modify : (
      principal,
      vec AuditPermission,
      vec AuditPermission,
    ) -> ();
  permissions_revoke_all_permissions : (principal) -> (bool);
  wallet_balance : () -> (nat) query;
  wallet_receive : () -> (WalletReceiveResult);
}