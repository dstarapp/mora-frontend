type CanisterInfoShow = record {
  status : CanisterStatusResult;
  canister_id : text;
};
type CanisterSettings = record {
  freezing_threshold : opt nat;
  controllers : opt vec principal;
  memory_allocation : opt nat;
  compute_allocation : opt nat;
};
type CanisterStatus = variant { stopped; stopping; running };
type CanisterStatusResult = record {
  status : CanisterStatus;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCAnisterSettings;
  idle_cycles_burned_per_day : nat;
  module_hash : opt vec nat8;
};
type CorePermission = variant {
  WorkerFrozen;
  ManagerPermission;
  ManagerConfig;
  ManagerQuery;
  WorkerLog;
  ManagerUpgrade;
  WorkerPermission;
  ManagerSettings;
  ManagerLog;
  WorkerUpdate;
  ManagerRefresh;
  WorkerFind;
  ManagerFind;
  ManagerInsert;
  ManagerWasm;
  WorkerUnfrozen;
  WorkerInsert;
  WorkerQuery;
};
type DefiniteCAnisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type LightCore = record {
  status : LightCoreStatus;
  created : nat64;
  content : LightCoreContent;
  hash : text;
  read : nat64;
  used : nat64;
  user : principal;
  updated : nat64;
};
type LightCoreContent = record {
  id : text;
  info_json : text;
  core_json : text;
  experience_json : text;
};
type LightCoreStatus = variant {
  FrozenByAuditor : record {
    auditor : principal;
    timestamp : nat64;
    reason : text;
  };
  Alive : record { auditor : principal; timestamp : nat64 };
  FrozenByAuthor : record { timestamp : nat64; reason : text };
};
type LightExecutingQueryResult = variant {
  value : LightExecutingQueryValue;
  none;
  frozen : text;
};
type LightExecutingQueryValue = record {
  id : text;
  info_json : text;
  created : nat64;
  creator : principal;
  core_json : text;
  hash : text;
  audited : nat64;
  auditor : principal;
  updated : nat64;
};
type Log = record { content : text; time : nat64; level : LogLevel };
type LogLevel = variant { Error; Info; Warn; Debug; Trace };
type ManagedCanisterChecking = record { check_number : nat32; next : nat32 };
type ManagedCanisterConfig = record {
  maintained : ManagedCanisterMaintained;
  checking : ManagedCanisterChecking;
  initial : ManagedCanisterInitial;
};
type ManagedCanisterInitial = record {
  max_canister_count : nat32;
  initial_worker_cycles : nat;
  max_worker_memory_size : nat;
};
type ManagedCanisterMaintained = record {
  min_days : nat16;
  recharge_cycles : nat64;
  min_cycles : nat;
};
type ManagerWorkerRefreshResult = variant {
  NewWorker : CanisterInfoShow;
  Refreshed : vec CanisterInfoShow;
  DeployFailed : text;
};
type MotokoResult = variant { ok; err : text };
type MotokoResult_1 = variant { ok : principal; err : text };
type MotokoResult_2 = variant { ok : bool; err : text };
type Page = record { page : nat32; size : nat32 };
type PageData = record {
  all : nat32;
  data : vec text;
  page : nat32;
  size : nat32;
};
type PageData_1 = record {
  all : nat32;
  data : vec Log;
  page : nat32;
  size : nat32;
};
type TimerData = record { interval : nat64; enabled : bool };
type UpdateSettingsArgument = record {
  canister_id : principal;
  settings : CanisterSettings;
};
type WalletReceiveResult = record { accepted : nat64 };
service : {
  canister_status : () -> (CanisterStatusResult);
  config_maintaining_find : () -> (bool) query;
  config_maintaining_set : (bool) -> (bool);
  config_managed_canister_config_find : () -> (ManagedCanisterConfig) query;
  config_managed_canister_config_set : (ManagedCanisterConfig) -> (bool);
  config_timer_data_find : () -> (TimerData) query;
  config_timer_data_manual : () -> (ManagerWorkerRefreshResult);
  config_timer_data_set : (TimerData) -> (bool);
  executing_query : (text) -> (LightExecutingQueryResult);
  hash_find : (text) -> (principal) query;
  hashes_find_by_page : (Page) -> (PageData) query;
  light_find : (text) -> (opt LightCore);
  light_frozen : (text, text, principal) -> (MotokoResult);
  light_insert : (text, LightCoreContent, principal, principal, vec text) -> (
      MotokoResult_1,
    );
  light_insert_core : (LightCore, principal) -> (MotokoResult);
  light_read : (text) -> (nat64);
  light_unfrozen : (text, principal) -> (MotokoResult);
  logs_delete : (nat32) -> (bool);
  logs_find_by_page : (Page) -> (PageData_1) query;
  permissions_find : () -> (vec record { text; vec CorePermission }) query;
  permissions_grant_all_permissions : (principal) -> (bool);
  permissions_has_all_permissions : (principal) -> (bool) query;
  permissions_modify : (
      principal,
      vec CorePermission,
      vec CorePermission,
    ) -> ();
  permissions_revoke_all_permissions : (principal) -> (bool);
  wallet_balance : () -> (nat) query;
  wallet_receive : () -> (WalletReceiveResult);
  worker_add_controller : (principal, principal) -> (MotokoResult);
  worker_insert : (principal) -> (MotokoResult);
  worker_permissions_grant_all_permissions : (principal, principal) -> (
      MotokoResult_2,
    );
  worker_reinstall : (principal) -> (MotokoResult);
  worker_states_find : () -> (vec CanisterInfoShow) query;
  worker_states_refresh : () -> (ManagerWorkerRefreshResult);
  worker_update_settings : (UpdateSettingsArgument) -> (MotokoResult);
  worker_upgrade : (principal) -> (MotokoResult);
  worker_wasm_find : () -> (opt vec nat8) query;
  worker_wasm_set : (opt vec nat8) -> (bool);
  workers : () -> (vec principal) query;
}