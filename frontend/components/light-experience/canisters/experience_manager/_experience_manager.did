type CanisterInfoShow = record {
  status : CanisterStatusResult;
  canister_id : text;
};
type CanisterSettings = record {
  freezing_threshold : opt nat;
  controllers : opt vec principal;
  memory_allocation : opt nat;
  compute_allocation : opt nat;
};
type CanisterStatus = variant { stopped; stopping; running };
type CanisterStatusResult = record {
  status : CanisterStatus;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCAnisterSettings;
  idle_cycles_burned_per_day : nat;
  module_hash : opt vec nat8;
};
type DefiniteCAnisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type DoneLightExperienceManager = record {
  id : text;
  status : LightExperienceStatus;
  created : nat64;
  user : principal;
  canister_id : principal;
  done_info : LightExperienceInfo;
  updated : nat64;
};
type DoneLightExperienceWorker = record {
  id : text;
  status : LightExperienceStatus;
  created : nat64;
  done_info : LightExperienceInfo;
  updated : nat64;
  done_content : LightExperienceContent;
  frozen_reason : opt text;
};
type ExperienceInsertResult = record { id : text; canister_id : principal };
type ExperiencePermission = variant {
  ManagerPermission;
  ManagerConfig;
  WorkerPurchase;
  WorkerConfig;
  ManagerQuery;
  WorkerLog;
  ManagerUpgrade;
  WorkerStatus;
  WorkerCollect;
  WorkerPermission;
  ManagerSettings;
  ManagerLog;
  ManagerRefresh;
  WorkerFind;
  ManagerFind;
  ManagerInsert;
  ManagerWasm;
  WorkerInsert;
  WorkerQuery;
};
type ExperienceQueryStatus = variant {
  Done;
  Auditing;
  DoneAuditing;
  Rejected;
  DoneRejected;
  Removed;
  DoneEditing;
  Frozen;
  Editing;
};
type ExperienceQueryWrappedStatus = variant {
  All;
  Online;
  Review;
  Draft;
  Offline;
  Trash;
};
type ExperienceUserCollection = record {
  id : text;
  user : principal;
  canister_id : principal;
  timestamp : nat64;
};
type LightCoreContent = record {
  id : text;
  info_json : text;
  core_json : text;
  experience_json : text;
};
type LightExperienceContent = record {
  core_json : text;
  experience_json : text;
};
type LightExperienceDoneInfo = record {
  hash : text;
  canister_id : principal;
  timestamp : nat64;
  price : LightExperienceDonePrice;
};
type LightExperienceDonePrice = variant {
  Free;
  Price : record { address : TransferUser; price : Price };
};
type LightExperienceInfo = record {
  categories : vec text;
  thumbnail : text;
  runnable_planet : LightExperienceRunnablePlanet;
  name : text;
  cover : text;
  tags : vec text;
  instruction : text;
};
type LightExperienceManager = record {
  id : text;
  status : LightExperienceStatus;
  created : nat64;
  editing_info : LightExperienceInfo;
  user : principal;
  done_info : opt LightExperienceInfo;
  updated : nat64;
};
type LightExperienceReceipt = record {
  id : text;
  created : nat64;
  hash : text;
  canister_id : principal;
  seller : principal;
  done_info : LightExperienceInfo;
};
type LightExperienceRunnablePlanet = variant {
  All;
  None;
  Includes : vec text;
  Excludes : vec text;
};
type LightExperienceStatus = variant {
  Done : LightExperienceStatusDone;
  Auditing : LightExperienceStatusAuditing;
  DoneAuditing : LightExperienceStatusDoneAuditing;
  Rejected : LightExperienceStatusRejected;
  DoneRejected : LightExperienceStatusDoneRejected;
  Removed : LightExperienceStatusRemoved;
  DoneEditing : LightExperienceStatusDoneEditing;
  Frozen : LightExperienceStatusFrozen;
  Editing : LightExperienceStatusEditing;
};
type LightExperienceStatusAuditing = record {
  reasons : vec nat32;
  code : text;
  hash : text;
  timestamp : nat64;
  price : LightExperienceDonePrice;
};
type LightExperienceStatusDone = record {
  hash : text;
  canister_id : principal;
  history : vec LightExperienceDoneInfo;
  timestamp : nat64;
  price : LightExperienceDonePrice;
};
type LightExperienceStatusDoneAuditing = record {
  reasons : vec nat32;
  code : text;
  done : LightExperienceStatusDone;
  hash : text;
  timestamp : nat64;
  price : LightExperienceDonePrice;
};
type LightExperienceStatusDoneEditing = record {
  reasons : vec nat32;
  done : LightExperienceStatusDone;
  timestamp : nat64;
};
type LightExperienceStatusDoneRejected = record {
  reasons : vec nat32;
  done : LightExperienceStatusDone;
  timestamp : nat64;
  reason : text;
};
type LightExperienceStatusEditing = record {
  reasons : vec nat32;
  timestamp : nat64;
};
type LightExperienceStatusFrozen = record {
  done : opt LightExperienceStatusDone;
  timestamp : nat64;
  done_auditing : opt LightExperienceStatusDoneAuditing;
  done_editing : opt LightExperienceStatusDoneEditing;
  done_rejected : opt LightExperienceStatusDoneRejected;
  reason : text;
};
type LightExperienceStatusRejected = record {
  reasons : vec nat32;
  timestamp : nat64;
  reason : text;
};
type LightExperienceStatusRemoved = record {
  editing : opt LightExperienceStatusEditing;
  timestamp : nat64;
  rejected : opt LightExperienceStatusRejected;
};
type LightExperienceWorker = record {
  id : text;
  status : LightExperienceStatus;
  created : nat64;
  editing_info : LightExperienceInfo;
  done_info : LightExperienceInfo;
  updated : nat64;
  done_content : LightExperienceContent;
  editing_content : LightExperienceContent;
};
type Log = record { content : text; time : nat64; level : LogLevel };
type LogLevel = variant { Error; Info; Warn; Debug; Trace };
type ManagedCanisterChecking = record { check_number : nat32; next : nat32 };
type ManagedCanisterConfig = record {
  maintained : ManagedCanisterMaintained;
  checking : ManagedCanisterChecking;
  initial : ManagedCanisterInitial;
};
type ManagedCanisterInitial = record {
  max_canister_count : nat32;
  initial_worker_cycles : nat;
  max_worker_memory_size : nat;
};
type ManagedCanisterMaintained = record {
  min_days : nat16;
  recharge_cycles : nat64;
  min_cycles : nat;
};
type ManagerWorkerRefreshResult = variant {
  NewWorker : CanisterInfoShow;
  Refreshed : vec CanisterInfoShow;
  DeployFailed : text;
};
type MotokoResult = variant { ok : principal; err : text };
type MotokoResult_1 = variant { ok : ExperienceInsertResult; err : text };
type MotokoResult_2 = variant { ok; err : text };
type MotokoResult_3 = variant { ok : bool; err : text };
type Page = record { page : nat32; size : nat32 };
type PageData = record {
  all : nat32;
  data : vec LightExperienceManager;
  page : nat32;
  size : nat32;
};
type PageData_1 = record {
  all : nat32;
  data : vec ExperienceUserCollection;
  page : nat32;
  size : nat32;
};
type PageData_2 = record {
  all : nat32;
  data : vec LightExperienceWorker;
  page : nat32;
  size : nat32;
};
type PageData_3 = record {
  all : nat32;
  data : vec LightExperienceReceipt;
  page : nat32;
  size : nat32;
};
type PageData_4 = record {
  all : nat32;
  data : vec DoneLightExperienceManager;
  page : nat32;
  size : nat32;
};
type PageData_5 = record {
  all : nat32;
  data : vec Log;
  page : nat32;
  size : nat32;
};
type PageData_6 = record {
  all : nat32;
  data : vec principal;
  page : nat32;
  size : nat32;
};
type Price = record { e8s : nat64 };
type TimerData = record { interval : nat64; enabled : bool };
type TransferUser = variant { "principal" : principal; address : text };
type UpdateSettingsArgument = record {
  canister_id : principal;
  settings : CanisterSettings;
};
type WalletReceiveResult = record { accepted : nat64 };
service : {
  canister_status : () -> (CanisterStatusResult);
  config_audit_canister_id_find : () -> (opt principal) query;
  config_audit_canister_id_set : (opt principal) -> (bool);
  config_core_manager_canister_id_find : () -> (opt principal) query;
  config_core_manager_canister_id_set : (opt principal) -> (bool);
  config_maintaining_find : () -> (bool) query;
  config_maintaining_set : (bool) -> (bool);
  config_managed_canister_config_find : () -> (ManagedCanisterConfig) query;
  config_managed_canister_config_set : (ManagedCanisterConfig) -> (bool);
  config_purchase_canister_id_find : () -> (opt principal) query;
  config_purchase_canister_id_set : (opt principal) -> (bool);
  config_timer_data_find : () -> (TimerData) query;
  config_timer_data_manual : () -> (ManagerWorkerRefreshResult);
  config_timer_data_set : (TimerData) -> (bool);
  experience_auditing : (text, text, text, LightExperienceDonePrice) -> (
      MotokoResult,
    );
  experience_collect : (text) -> (MotokoResult);
  experience_collect_delete : (text) -> (MotokoResult);
  experience_done : (text, text, LightCoreContent, vec text) -> (MotokoResult);
  experience_done_price : (text, LightExperienceDonePrice) -> (MotokoResult);
  experience_editing : (
      text,
      opt record { LightExperienceInfo; LightExperienceContent },
    ) -> (MotokoResult);
  experience_find_experience : (principal, text) -> (opt LightExperienceWorker);
  experience_find_experiences : (vec ExperienceQueryStatus, Page) -> (
      PageData,
    ) query;
  experience_find_user_collections : (principal, Page) -> (PageData_1);
  experience_find_user_experiences : (principal, Page) -> (PageData_2);
  experience_find_user_receipts : (principal, Page) -> (PageData_3);
  experience_frozen : (text, text) -> (MotokoResult);
  experience_frozen_by_user : (text, text) -> (MotokoResult);
  experience_insert : (LightExperienceInfo, LightExperienceContent) -> (
      MotokoResult_1,
    );
  experience_insert_experience : (
      principal,
      LightExperienceWorker,
      principal,
    ) -> (MotokoResult_2);
  experience_query_experience_done : (text) -> (opt DoneLightExperienceWorker);
  experience_rejected : (text, text, text) -> (MotokoResult);
  experience_removed : (text) -> (MotokoResult);
  experiences_find_experiences_by_wrapped_status : (
      ExperienceQueryWrappedStatus,
      Page,
    ) -> (PageData) query;
  experiences_query_experiences : (Page) -> (PageData_4) query;
  experiences_query_experiences_by_conditions : (
      opt text,
      opt vec text,
      opt vec text,
      opt principal,
      Page,
    ) -> (PageData_4) query;
  logs_delete : (nat32) -> (bool);
  logs_find_by_page : (Page) -> (PageData_5) query;
  permissions_find : () -> (
      vec record { text; vec ExperiencePermission },
    ) query;
  permissions_grant_all_permissions : (principal) -> (bool);
  permissions_has_all_permissions : (principal) -> (bool) query;
  permissions_modify : (
      principal,
      vec ExperiencePermission,
      vec ExperiencePermission,
    ) -> ();
  permissions_revoke_all_permissions : (principal) -> (bool);
  user_find : (principal) -> (opt principal) query;
  users_find_by_page : (Page) -> (PageData_6) query;
  wallet_balance : () -> (nat) query;
  wallet_receive : () -> (WalletReceiveResult);
  worker_add_controller : (principal, principal) -> (MotokoResult_2);
  worker_insert : (principal) -> (MotokoResult_2);
  worker_permissions_grant_all_permissions : (principal, principal) -> (
      MotokoResult_3,
    );
  worker_reinstall : (principal) -> (MotokoResult_2);
  worker_states_find : () -> (vec CanisterInfoShow) query;
  worker_states_refresh : () -> (ManagerWorkerRefreshResult);
  worker_update_settings : (UpdateSettingsArgument) -> (MotokoResult_2);
  worker_upgrade : (principal) -> (MotokoResult_2);
  worker_wasm_find : () -> (opt vec nat8) query;
  worker_wasm_set : (opt vec nat8) -> (bool);
  workers : () -> (vec principal) query;
}